###########################################################
# Analysis of Swiss wastewater data
# J.S. Huisman
###########################################################
library(tidyverse)
###########################################################
# Analysis of Swiss wastewater data
# J.S. Huisman
###########################################################
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
###########################################################
# Analysis of Swiss wastewater data
# J.S. Huisman
###########################################################
library(tidyverse)
library(lubridate)
library(patchwork)
library(viridis)
library(EpiEstim)
app_location = '/Users/jana/Documents/PhD/covid/covid-19-re-shiny-app'
source(paste0(app_location,'/app/otherScripts/2_utils_getInfectionIncidence.R'))
source(paste0(app_location,'/app/otherScripts/3_utils_doReEstimates.R'))
source('wastewater_functions.R')
setwd("~/wastewater_re_shiny/code")
source('wastewater_functions.R')
plot_dir = '../figures'
theme_set(theme_minimal() +
theme(
strip.text = element_text(size=20),
axis.text= element_text(size=17),
axis.title =  element_text(size=20),
legend.text= element_text(size=17),
legend.title= element_text(size=20)
))
###########################################################
### ZURICH ####
ZH_flow_url = "http://parsivel-eawag.ch/sarscov2/__data__/ARA%20Werdhoelzli_flow_cases.csv"
ZH_genes_url = "http://parsivel-eawag.ch/sarscov2/__data__/ARA%20Werdhoelzli_genes.csv"
raw_flow_data_ZH <- read_delim(ZH_flow_url, delim = ';',
col_names = c('date', 'cases', 'cases_smooth',
'flow', 'n1_smooth', 'n2_smooth'),
col_types = cols(date = col_date(format = '')),
skip = 1)
raw_gene_data_ZH <- read_delim(ZH_genes_url, delim = ';',
col_names = c('date', 'n1', 'n2'),
col_types = cols(date = col_date(format = '')),
skip = 1)
###########################################################
#### ZURICH ####
ZH_flow_url = "http://parsivel-eawag.ch/sarscov2/__data__/ARA%20Werdhoelzli_flow_cases.csv"
ZH_genes_url = "http://parsivel-eawag.ch/sarscov2/__data__/ARA%20Werdhoelzli_genes.csv"
raw_flow_data_ZH <- read_delim(ZH_flow_url, delim = ';',
col_names = c('date', 'cases', 'cases_smooth',
'flow', 'n1_smooth', 'n2_smooth'),
col_types = cols(date = col_date(format = '')),
skip = 1)
raw_gene_data_ZH <- read_delim(ZH_genes_url, delim = ';',
col_names = c('date', 'n1', 'n2'),
col_types = cols(date = col_date(format = '')),
skip = 1)
# We select data from January 20th, because the sampling was different before
# Missing data is imputed with linear interpolation
raw_data_ZH <- raw_flow_data_ZH %>%
left_join(raw_gene_data_ZH, c('date')) %>%
filter(!is.na(n1),
date >= as_date("2021-01-20")) %>%
mutate(orig_data = TRUE) %>%
complete(date = seq.Date(min(date), max(date), by = 'days')) %>%
mutate(across(where(is.numeric), ~ zoo::na.approx(.x, na.rm = F) )) %>%
mutate(region = 'ZH')
View(raw_data_ZH)
raw_data_ZH <- raw_data_ZH %>%
select(-n2, n2_smooth)
head(raw_data_ZH)
# We select data from January 20th, because the sampling was different before
# Missing data is imputed with linear interpolation
raw_data_ZH <- raw_flow_data_ZH %>%
left_join(raw_gene_data_ZH, c('date')) %>%
filter(!is.na(n1),
date >= as_date("2021-01-20")) %>%
mutate(orig_data = TRUE) %>%
complete(date = seq.Date(min(date), max(date), by = 'days')) %>%
mutate(across(where(is.numeric), ~ zoo::na.approx(.x, na.rm = F) )) %>%
mutate(region = 'ZH')
raw_data_ZH <- raw_data_ZH %>%
select(-n2, -n2_smooth)
View(raw_data_ZH)
View(raw_data_ZH)
# Plot `raw' WW data #####
# Required to be displayed
ggplot(raw_data_ZH, aes(x=date, y = n2)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N2 load')
# Plot `raw' WW data #####
# Required to be displayed
ggplot(raw_data_ZH, aes(x=date, y = n1)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N1 load')
View(raw_flow_data_ZH)
# Plot `raw' WW data - Zurich #####
# Required to be displayed
raw_ww_plot <- ggplot(raw_data_ZH, aes(x=date, y = n1)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N1 load')
plot(raw_ww_plot)
# Plot `raw' WW data - Zurich #####
# Required to be displayed
raw_ww_plot <- ggplot(raw_data_ZH, aes(x=date, y = n1)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N1 load') +
theme_minimal(
base_size = 11,
base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22
)
# Plot `raw' WW data - Zurich #####
# Required to be displayed
raw_ww_plot <- ggplot(raw_data_ZH, aes(x=date, y = n1)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N1 load')
raw_ww_plot +
theme_minimal(
base_size = 11,
base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22
)
raw_ww_plot +
theme_bw()
# Plot `raw' WW data - Zurich #####
# Required to be displayed
raw_ww_plot <- ggplot(raw_data_ZH, aes(x=date, y = n1)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N1 load') +
theme_light()
plot(raw_ww_plot)
source("helper_code/reading_in.R")
setwd("~/wastewater_re_shiny")
source("helper_code/reading_in.R")
shiny::runApp()
runApp()
runExample("06_tabsets")
runApp()
runApp()
runApp()
# Plot `raw' WW data - Zurich #####
# Required to be displayed
raw_ww_plot <- ggplot(raw_data_ZH, aes(x=date, y = n1)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N1 load') +
ggtitle("Wastewater Gene Copies in Zurich") +
theme_light()
plot(raw_ww_plot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
runApp()
runApp()
all_raw_plots <- list()
all_raw_plots[["zh"]] <- ggplot(raw_data_ZH, aes(x=date, y = n1)) +
geom_point(colour = 'blue') +
geom_line(colour = 'black', linetype = 'dashed') +
geom_smooth(method = 'loess', colour = 'black',
method.args = list(span = 0.05, degree = 1) ) +
labs(x = 'Date' , y='N1 load') +
ggtitle("Wastewater Gene Copies in Zurich") +
theme_light()
plot(all_raw_plots[[1]])
plot(all_raw_plots[[zh]])
plot(all_raw_plots[["zh"]])
a <- "zh"
plot(all_raw_plots[[aa]])
plot(all_raw_plots[[a]])
runApp()
runApp()
rsconnect::showLogs()
